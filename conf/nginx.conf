# Configuration File - Nginx Server Configs
# This is a read-only file, do not try to modify it.

master_process on;

worker_processes auto;
worker_cpu_affinity auto;

# main configuration snippet starts


# main configuration snippet ends

error_log logs/error.log debug;
pid logs/nginx.pid;

worker_rlimit_nofile 20480;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_rlimit_core  16G;

worker_shutdown_timeout 240s;

http {
    resolver 192.168.65.5;
    resolver_timeout 5;
    # put extra_lua_path in front of the builtin path
    # so user can override the source code
    lua_package_path  "${prefix}deps/share/?.lua;${prefix}deps/share/?/init.lua;${prefix}?.lua;${prefix}?/init.lua;./?.lua;;";
    lua_package_cpath "${prefix}deps/lib/?.so;;";

    lua_code_cache on;

    lua_ssl_verify_depth 5;
    ssl_session_timeout 86400;

    underscores_in_headers on;

    lua_socket_log_errors off;

    lua_http10_buffering off;

    lua_regex_match_limit 100000;
    lua_regex_cache_max_entries 8192;

    log_format main escape=default '$remote_addr - $remote_user [$time_local] $http_host "$request" $status $body_bytes_sent $request_time "$http_referer" "$http_user_agent" $upstream_addr $upstream_status $upstream_response_time "$upstream_scheme://$upstream_host"';
    uninitialized_variable_warn off;

    access_log logs/access.log main buffer=16384 flush=3;
    open_file_cache  max=1000 inactive=60;
    client_max_body_size 0;
    keepalive_timeout 60s;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 10s;

    include /usr/local/openresty/nginx/conf/mime.types;
    charset utf-8;

    # error_page
    error_page 500 @50x.html;

    real_ip_header X-Real-IP;

    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;

    init_by_lua_block {
        ngx.log(ngx.ERR, "init block")

        ngx.log(ngx.ERR, package.path)
        ngx.log(ngx.ERR, package.cpath)

        require "resty.core"
        sidecar = require "sidecar"
        sidecar.init()
    }

    server {
        listen {{listen_port}} default_server reuseport;
        #listen 443 ssl default_server http2 reuseport;

        listen [::]:{{listen_port}} default_server reuseport;
        #listen [::]:443 ssl default_server http2 reuseport;

        server_name _;

        #ssl_certificate      cert/ssl_PLACE_HOLDER.crt;
        #ssl_certificate_key  cert/ssl_PLACE_HOLDER.key;
        #ssl_session_cache    shared:SSL:20m;
        #ssl_session_timeout 10m;

        #ssl_protocols TLSv1.2 TLSv1.3;
        #ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        #ssl_prefer_server_ciphers on;
        #ssl_session_tickets off;

        proxy_ssl_name $upstream_host;
        proxy_ssl_server_name on;

        location / {
            set $upstream_mirror_host        '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';

            set $upstream_scheme             'http';
            set $upstream_host               $http_host;

            access_by_lua_block {
                sidecar.access()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Date;

            ### the following x-forwarded-* headers is to send to upstream server

            set $var_x_forwarded_for        $remote_addr;
            set $var_x_forwarded_proto      $scheme;
            set $var_x_forwarded_host       $host;
            set $var_x_forwarded_port       $server_port;

            if ($http_x_forwarded_for != "") {
                set $var_x_forwarded_for "${http_x_forwarded_for}, ${realip_remote_addr}";
            }
            if ($http_x_forwarded_host != "") {
                set $var_x_forwarded_host $http_x_forwarded_host;
            }
            if ($http_x_forwarded_port != "") {
                set $var_x_forwarded_port $http_x_forwarded_port;
            }

            proxy_set_header   X-Forwarded-For      $var_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $var_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host     $var_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port     $var_x_forwarded_port;

            proxy_pass      $upstream_scheme://$upstream_host;

            #header_filter_by_lua_block {
            #}

            #body_filter_by_lua_block {
            #}

            #log_by_lua_block {
            #}
        }


        location = /nginx_status {
            access_log off;
            stub_status;
        }

        location = /sidecar/config/reload {
            content_by_lua_block {
                local params = ngx.req.get_uri_args()
                local res = ""
                if params.secret then
                    if sidecar.is_admin(params.secret) then
                        if params.port < 1000 or params.port > 65535 then
                            res = "{\"error\": \"invalid port!\"}"
                        else
                            local ok, err = sidecar.config_reload() 
                            if ok then
                                res = "{\"message\": \"Ok!\"}"
                            else 
                                res = "{\"error\": \"Update failed!\"}"
                            end
                        end
                    else
                        res = "{\"error\": \"invalid secret!\"}"
                    end
                else
                    res = "{\"error\": \"invalid request, secret required!\"}"
                end
                ngx.say(res)
            }
        }

        location = /sidecar/config {
            content_by_lua_block {
                local params = ngx.req.get_uri_args()
                local res = ""
                if params.secret then
                    if sidecar.is_admin(params.secret) then
                        res = sidecar.config()
                    else
                        res = "{\"error\": \"invalid secret!\"}"
                    end
                else
                    res = "{\"error\": \"invalid request, secret required!\"}"
                end
                ngx.say(res)
            }
        }
    }
}